generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Tag {
  RECRUIT  @map("Recruit")
  INFO     @map("Info")
  QUESTION @map("Question")
}

enum MissionType {
  DAILY   @map("Daily")
  WEEKLY  @map("Weekly")
  MONTHLY @map("Monthly")
}

enum Priority {
  LOW    @map("Low")
  MIDDLE @map("Middle")
  HIGH   @map("High")
}

enum Trigger {
  POST_CREATED    @map("post_created")
  COMMENT_CREATED @map("comment_created")
  LOGIN           @map("login")
}

enum AlarmType {
  COMMENT @map("Comment")
  SYSTEM  @map("System")
  EVENT   @map("Event")
  MISSION @map("Mission")
}

model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  email        String    @unique
  password     String    @unique
  firstName    String
  lastName     String
  point        Int       @default(0)
  firstLoginAt DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  countryCode String
  country     Country       @relation(fields: [countryCode], references: [countryCode])
  cityCode    Int?
  city        City?         @relation(fields: [cityCode], references: [cityCode])
  Profile     Profile?
  posts       Post[]        @relation("UserPosts")
  Comment     Comment[]
  token       RefreshToken? @relation
  tokenId     String?       @db.ObjectId

  missions UserMission[]
  Badges   UserBadge[]
  badgeId  String?       @db.ObjectId
  todos    Todo[]

  @@map("users") // 몽고DB 컬렉션명
}

model Profile {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @unique @db.ObjectId
  nickname    String
  description String?
  imgUrl      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("profiles")
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  tag       Tag?
  viewCount Int?     @default(0)
  isDeleted Boolean? @default(false)

  userId String @db.ObjectId
  user   User   @relation("UserPosts", fields: [userId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Comments  Comment[]

  @@map("posts")
}

model Comment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  postId      String   @db.ObjectId
  commentorId String   @db.ObjectId
  content     String
  isDeleted   Boolean? @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post      Post @relation(fields: [postId], references: [id])
  commentor User @relation(fields: [commentorId], references: [id])

  @@map("comments")
}

model Todo {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  title       String
  description String?
  isDone      Boolean? @default(false)
  priority    Priority

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("todos")
}

model Mission {
  id      String      @id @map("_id") @db.ObjectId
  title   String
  type    MissionType
  trigger Trigger
  goal    Int
  reward  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users UserMission[]

  @@map("missions")
}

model UserMission {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String @db.ObjectId
  missionId String @db.ObjectId

  User    User    @relation(fields: [userId], references: [id])
  Mission Mission @relation(fields: [missionId], references: [id])

  progress    Int
  isCompleted Boolean
  completedAt DateTime?

  @@map("user_missions")
}

model Badge {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  iconUrl     String?
  criteria    Json    @unique // 뱃지 획득 조건

  users UserBadge[]

  @@map("badges")
}

model UserBadge {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  User    User   @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId
  Badge   Badge  @relation(fields: [badgeId], references: [id])
  badgeId String @db.ObjectId

  acquiredAt DateTime

  @@map("user_badges")
}

model Country {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  countryCode String  @unique // KR, US 등의 ISO 코드
  koreanName  String  @unique
  englishName String?
  cities      City[]  @relation("CountryCities")
  Users       User[]

  @@map("countries")
}

model City {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  cityCode    Int     @unique
  countryCode String
  imgUrl      String?
  dnScore     Int
  description String

  users   User[]
  Country Country? @relation("CountryCities", fields: [countryCode], references: [countryCode])

  @@unique([countryCode, name])
  @@map("cities") // 몽고DB 컬렉션명
}

model Alarm {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  receiverId String
  type       AlarmType
  isRead     Boolean
  createdAt  DateTime  @default(now())

  @@map("alarms")
}

model RefreshToken {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  token  String @unique
  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  expiresAt DateTime

  @@map("refresh_tokens")
}

model Counter {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  seq Int    @unique

  @@map("counter")
}
